#!/bin/sh
# vim: set syntax=sh:
# should be called by package action scripts


fakeroot_session_start()
{
	if [ $USE_FAKEROOT -ne 1 ]; then
		return 0
	fi

	echo "Starting new fakeroot session, persistent file in $FAKEROOT_STATE_FILE"
	rm -f $FAKEROOT_STATE_FILE
}

fakeroot_session_end()
{
	if [ $USE_FAKEROOT -ne 1 ]; then
		return 0
	fi

	echo "Ending fakeroot session"
}

if [ $USE_FAKEROOT -eq 1 ] ; then
	FAKEROOT_CMD="$FAKEROOT -p $FAKEROOT_STATE_FILE -d"
else
	FAKEROOT_CMD=""
fi

common_fetch_wget()
{
    URL=$1
    DIST=$2

    wget -P $DIST $URL
}

common_fetch_cvs()
{
    CVSLINK=$1
    PACKAGE_NAME=$2
    DIST=$3

    nowdir=`pwd`
    cd $DIST
    # If module exists, try cvs update
    if [ -e $PACKAGE_NAME ]; then
	cd $PACKAGE_NAME
	cvs -q update || return $?
    else
	cvs -Q co -d $PACKAGE_NAME $CVSLINK || return $?
    fi
    cd $nowdir
}

common_fetch_cvs_version()            
{
    CVSLINK=$1
    PACKAGE_NAME=$2
    VERSION=$3
    DIST=$4

    nowdir=`pwd`               
    cd $DIST
    # If module exists, try cvs update
    if [ -e $PACKAGE_NAME/CVS ]; then
        cd $PACKAGE_NAME
        cvs -q update -r $VERSION || return $?
    else
        cvs -Q co -r $VERSION -d $PACKAGE_NAME $CVSLINK || return $?
    fi  

    [ $? -ne 0 ] && return $?
    cd $nowdir
}

#
# common_fetch_svn_revision PACKAGE_NAME REV_SPEC BASEDIR
#
# if REV is just a number, URL will be default to trunk
# if REV is in XXXX@NN, URL will be SVN_SERVER/PACKAGE_NAME/XXXX, revision will be NN
#
common_fetch_svn_rev()
{
	PACKAGE_NAME=$1
	rspec=$2
	BASEDIR=$3

	if [ $# -eq 4 ] ; then
		fetch_to=$4
	else
		fetch_to=$PACKAGE_NAME
	fi

#	echo "pkgname $PACKAGE_NAME"
#	echo "rev $rspec"
#	echo "basedir $BASEDIR"

	if echo $rspec | grep '@' > /dev/null 2>&1 ; then
		svnbase=`echo $rspec | sed s/@.*//`
		real_rev=`echo $rspec | sed s/.*@//`
	else
		svnbase=trunk
		real_rev=$rspec
	fi

	url=$SVN_SERVER/$PACKAGE_NAME/$svnbase
#echo "URL: $url @ $real_rev"

	odir=`pwd`
	cd $BASEDIR || exit $?

	svn_info=`svn info --non-interactive $fetch_to 2> /dev/null | grep "URL"`
	if [ $? -ne 0 ]; then
#echo "IN: `pwd`"
#echo "CMD: svn co -q -r $real_rev $url $fetch_to"
		svn co --non-interactive -q -r $real_rev $url $fetch_to || return $?
	else
		if echo $svn_info | grep "$url" > /dev/null 2>&1 ; then
			cd $fetch_to
#echo "IN: `pwd`"
#echo "CMD: svn up -r $real_rev"
			svn up --non-interactive -r $real_rev || return $?
		else
			tree_url=`echo $svn_info | grep "URL:"`
			echo "Currently you checked out:"
			echo "  $tree_url"
			echo "But you want:"
			echo "  URL: $url"
			echo "which might cause problems. Please check if this is what you want, and either"
			echo " 1. delete the tree manually, or"
			echo " 2. correct your revision specs"
			return 1
		fi
	fi

	[ $? -ne 0 ] && return $?
	cd $odir
}

git_require_clean_work_tree()
{
	PACKAGE_NAME=$1

	git update-index -q --ignore-submodules --refresh
	err=0

	if ! git diff-files --quiet --ignore-submodules -- ; then
		echo >&2 "$PACKAGE_NAME: There are unstaged changes."
		err=1
	fi

	if ! git diff-index --cached --quiet HEAD --ignore-submodules -- ; then
		echo >&2 "$PACKAGE_NAME: There are uncommitted changes."
		err=1
	fi

	if [ $err -eq 1 ]; then
		return 1
	fi
	return 0
}

# For any git commands that require SSH connection, we need to retry
# several times to make sure it can connect. This is a known
# issue of Gerrit and not fixed yet.
run_gitcmd()
{
	gitcmd=$1

	if ! $gitcmd ; then
		sleep 1
		if ! $gitcmd ; then
			sleep 1
			$gitcmd || return $?
		fi
	fi

	return 0
}

#
# GIT support
#
# The current checkout method is to do the following:
#   git clone server_url/project_name working_dir_name
#   cd working_dir_name
#   git checkout <branch/tag name>
#
# The project name and branch name is derived via @rspec which has the
# following format (both fields are NOT optional):
#   gitpkg@branch_name
# where
#   gitpkg - is the project name (with .git appended at end)
#   branch_name - is the branch or tag name
#
# Additional action:
# Once a git checkout is complete, the current SHA1 will be recorded
# in a plain text file. This is currently for daily build reference
# only. In the future we might make use of this
# file for snapshot rebuild.
#
common_fetch_git()
{
	PACKAGE_NAME=$1
	rspec=$2
	BASEDIR=$3

	depth=2

	if echo $rspec | grep '@' > /dev/null 2>&1 ; then
		gitpkg=`echo $rspec | sed s/@.*//`
		tagname=`echo $rspec | sed s/.*@//`
	fi

	odir=`pwd`
	cd $BASEDIR || return $?

	local git_fetch_url=$GIT_FETCH_URL/$gitpkg
	local git_push_url=$GIT_PUSH_URL/$gitpkg

	if [ -d $PACKAGE_NAME ]; then
		cd $PACKAGE_NAME
		if git_require_clean_work_tree $PACKAGE_NAME; then
			run_gitcmd "git fetch -q --depth $depth origin $tagname" || return $?

			echo "Git checkout $tagname"
			git checkout -q FETCH_HEAD || return $?
		fi
	else
		# Get the refspec of the commit sha-1, and remove the "^{}" postfix if exist
		refspec=`run_gitcmd "git ls-remote $git_fetch_url" 2> /dev/null | grep $tagname | tail -1 | cut -f 2 | sed "s/\^{}$//"`
		if [ -n "$refspec" ]; then
			# Only checkout the required commit if there is a refspec (faster)
			git init -q $PACKAGE_NAME || return $?

			cd $PACKAGE_NAME
			git remote add origin $git_fetch_url || return $?

			echo "Git fetching $refspec from $git_fetch_url"
			run_gitcmd "git fetch -q --depth $depth origin $refspec" || return $?

			co_target="FETCH_HEAD"
		else
			# Here we need to clone the entire repository (much slower)
			echo "Git cloning from $git_fetch_url"
			run_gitcmd "git clone -q $git_fetch_url $PACKAGE_NAME" || return $?
			cd $PACKAGE_NAME

			co_target="$tagname"
		fi

		if [ "$git_fetch_url" != "$git_push_url" ] ; then
			git remote set-url --push origin $git_push_url || return $?
		fi

		echo "Git checkout $tagname"
		git checkout -q $co_target || return $?
	fi

	# disable git submodule for now
	if false; then
	git submodule init
	run_gitcmd "git submodule update" || return $?
	fi

	if [ ! -f .git/hooks/commit-msg ]; then
		wget -q -O .git/hooks/commit-msg http://gerrit.peplink.com/tools/hooks/commit-msg
		chmod 755 .git/hooks/commit-msg
	fi

	#sha1=`git rev-parse HEAD`
	#echo "${PACKAGE_NAME}_GIT=${gitpkg}@${sha1}" >> $PKGVERS

	cd $odir
}

common_patch_all()
{
    local package=$1
    local srcdir=$2
    
    patchesdir=${PACKAGESDIR}/${package}_patches
    nowdir=`pwd`
    abs_patchdir=$nowdir/${patchesdir}
    cd ${srcdir}
    for pat in ${abs_patchdir}/*
      do
      patch -p1 < $pat
    done
    cd $nowdir
}

# every argv is a list element
common_strip_files()
{
    local xstrip=$HOST_PREFIX-strip
    local filelist=$*		# filelist is the signle var as a "" quoted list
    
    for f in `echo ${filelist}`
    do
      if [ -e $f ]; then
	  echo "Strip ${f}"
	  ${xstrip} --remove-section=.note --remove-section=.comment ${f}
      else
	  echo "No such file: ${f}"
      fi
    done
}

common_untar_bz()
{
    TARBALL=$1
    DIST=$2

    tar -jxf ${TARBALL} -C ${DIST}
}

common_replace_str_file()
{
    INFILE=$1
    OUTFILE=$2
    FROMSTR=$3
    TOSTR=$4

    cat ${INFILE} | while read i
    do
      echo "${i//$FROMSTR/$TOSTR}" >> ${OUTFILE}
    done
}

TCOLOR_RED="\\033[31m"
TCOLOR_GREEN="\\033[32m"
TCOLOR_YELLOW="\\033[33m"
TCOLOR_BRED="\\033[1;31m"
TCOLOR_BGREEN="\\033[1;32m"
TCOLOR_BYELLOW="\\033[1;33m"
TCOLOR_NORMAL="\\033[0;39m"

echo_error()
{
	msg=$1

	echo -en $TCOLOR_BRED
	echo -n $msg
	echo -e $TCOLOR_NORMAL

	exit 2
}

# inittab_commit(base_path,path_to_inittab_tmp,rootdisk_relative_path)
inittab_commit()
{
	basepath=$1
	srcfile=$2
	dstfile=$1/$3/etc/inittab

	draft=$basepath/inittab.draft

	#echo "$basepath/helpers/draft_inittab.awk $dstfile > $draft"
	$basepath/helpers/draft_inittab.awk $dstfile > $draft || exit 1
	cat $srcfile >> $draft || exit 1
	$basepath/helpers/create_inittab.awk $draft > $dstfile || exit 1
}

# For action add/del
#   inittab_install(base_path,add|del|insert,type,command)
#
# For action login:
#   inittab_install(base_path,login,ttyS0|console,login_command)
#  
# For action commit:
#   inittab_install(base_path,commit,rootdisk_relative_path)
#
inittab_install()
{
#pwdir=`pwd`
#echo "current dir $pwdir"
	my_path=$1

	tmp_file=$my_path/inittab.tmp
	insert_tmp=$my_path/inittab.insert

	case $2 in
	add|del|login)
		echo "$2:$3:$4" >> $tmp_file || exit 1
		;;
	insert)
		echo "add:$3:$4" > $insert_tmp || exit 1
		cat $tmp_file >> $insert_tmp || exit 1
		mv $insert_tmp $tmp_file || exit 1
		;;
	commit)
		#echo "inittab_commit $1 $my_path/inittab.tmp $3"
		if inittab_commit $1 $tmp_file $3 ; then
			rm $tmp_file
		else
			echo_error "inittab_install: commit error"
			exit 1
		fi
		;;
	*)
		echo_error "unknown action: $2."
		exit 1
		;;
	esac
}

# set_pkgrev(package)
set_pkgrev() {
	# convert '.' and '-' to '_'
	_pkg=`echo "$1" | sed -e 's/[-.]/_/g'`
	#echo "normalized _pkg: $_pkg"

	# remove comments
	pkgvers=$(awk '/^[[:space:]]*#/ {next} {print}' $PKGVERS)

	for s in REV RTAG GIT; do
		pkg_ver_str=$(echo "$pkgvers" | grep "^[[:space:]]*${_pkg}_${s}")
		[ $? -eq 0 ] && break
	done

	#echo "pkg ver str: $pkg_ver_str"
	pkgrev=$(echo "$pkg_ver_str" | awk 'BEGIN {FS="="} {print $2}')
	#echo "pkgrev: $pkgrev"
}

#
# require_configure(void)
#
# This function expect to execute "configure" in the current directory.
# This function assume the autoconf configure is being used. Not any other
# fake configure.
#
require_configure()
{
# simple test for now
	test ! -f Makefile
}

#
# kheaders_rsync(src, intermediate, dst)
#
# All arguments are directory betwee rsync, $src directory must exist
#
# A two step rsync will be used, first sync to detect deletion under
# repeated execution. The second sync copy the $src to $dst.
#   rsync $src -> $intermediate
#   rsync $intermediate -> $dst
#
kheaders_rsync()
{
	local src=$1
	local inter=$2
	local dst=$3

	local del_list=$(rsync -av --delete $src $inter | grep '^deleting' | cut -f2 -d' ')
	rsync -a $inter $dst
	if [ -n "$del_list" ] ; then
		for dfile in $del_list ; do
			echo "Deleting $dfile"
			rm -rf $dfile
		done
	fi
}

#$1 base directory
create_prebuilt_install_dir()
{
	mkdir -p $1/tmp/var
	mkdir -p $1/tmp/etc
	ln -sf tmp/etc $1/etc
	ln -sf tmp/var $1/var
}

#$1 package name
create_prebuilt_tarball()
{
	rm -f $TOP_PREBUILT_EX/$1.tgz
	tar -czf $TOP_PREBUILT_EX/$1.tgz -C $TOP_PREBUILT_EX/$1/ .
	return $?
}

# @param
#   $1+ target library files to be fixed
# @return 0 if target file(s) is updated successfully
# @return 1 if target file(s) is not found
# @return 2 if target file(s) cannot be fixed
common_fix_la_libdir()
{
	local i ret=0
	for i in "$@"; do
		if [ ! -w "$i" ]; then
			ret=1
			continue
		fi
		sed -i -e "s|^libdir=.*|libdir='`dirname "$i"`'|" "$i" \
			2> /dev/null || ret=2
	done
	return $ret
}

common_roundup() {
        local x=$1 y=$2
        local d

        d=$((((x+(y-1))/y)*y))
        echo $d
}
