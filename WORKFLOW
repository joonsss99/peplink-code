Development workflow
====================

1. Any build would requires /profiles/pkgversion.lock to be generated, if the
   file does not exist, it will be generated by Make in any case
2. You need to set BUILD_TARGET variable in /firmware.model. Target name can be
   found in /configs/*_defconfig or in /profiles/balance.profile
3. Double check /firmware.version if you need to make changes
4. Running Make:

Previously you use "make all" but with fully parallel build in latest update,
you can now use:
  make -jN all.d
where N is 1.5 times number of CPU core (we believe this is optimal to saturate
all the cpu core, balancing between 'configure' script and gcc). Also make sure
in /make.conf:
  MAKE_OPTS=""
otherwise Make will spawn at maximum N x MAKE_OPTS number of gcc process which
probably will saturate your I/O instead of your CPU, and slow down your build.

More variations of using make is provided in the below section "Using Make
for firmware build".

5. If there are packages updated, you should run "make update" and then
   "make -jN fetch.d" to sync all the projects to the latest version. Note that
   if there are pending changes in a project, "fetch" will not git fetch/pull
   and overwrite your changes.

Using Make for firmware build
=============================

* "all" target:
echo "MAKE_OPTS=''" > make.conf ; make -jN all.d

* Update pkgversion.lock:
make update

* Fetch updates:
make -jN fetch.d

* Build only:
make -jN build.d

* To install to rootdisk, and package firmware image:
make install

* To package firmware image:
make upgrader-image

* To only build kernel
make -jN kernel-build

* To rebuild a particular package, without dependencies:
make -jN build PKG=foobar

* build all packages of foobar and its dependencies:
make -jN build.d PKG=foobar

* build multiple packages:
make -jN build.d PKG="foobar deadfood"

* to build then install (firmware image not generated):
make -jN install.d.c PKG="foobar deadfood"

* to clean
make -jN clean.d

* to clean package(s):
make -jN clean.d PKG="foobar deadfood"

For details you can read /helpers/dep.mk for all the dependency targets.

Verbosity control during build
------------------------------

Providing the variable "V" to make can control the verbosity of "build" and
"build.d" target. The default value of V is 2.

e.g: make -j12 build.d V=1 PKG=balance_scripts

V=0 - very quiet build only show which packages is being built, its list of
      dependencies, and status of build when each package is done building.
      All the logs are in /build_logs/<package>.log
V=1 - slightly verbose build, in addition to V=0 output, stderr will dump to
      the screen. stdout and stderr can also be found in /build_logs/<package>.log
      and /build_logs/<package>.err.log respectively.
V=2 - everything is dumped to the screen. Nothing is saved to /build_logs.
      Note V=2 will make it hard to track build errors when doing full build.
      This option is more useful when working on single package developer with
      repeated build, modify code, build cycle.

