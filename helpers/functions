# vim: set syntax=sh:

COLOR_LRED="\\033[1;31m"
COLOR_LGREEN="\\033[1;32m"
COLOR_LYELLOW="\\033[1;33m"
COLOR_RED="\\033[0;31m"
COLOR_GREEN="\\033[0;32m"
COLOR_YELLOW="\\033[0;33m"
COLOR_NORMAL="\\033[0;39m"

TITLE_START="\\033]2;"
TITLE_END="\\007"

# color => new RH6.0 bootup
# verbose => old-style bootup
# anything else => new style bootup without ANSI colors or positioning
BOOTUP=color
# Turn on graphical boot
GRAPHICAL=yes
# column to start "[  OK  ]" label in
RES_COL=60
# terminal sequence to move to that column. You could change this
# to something like "tput hpa ${RES_COL}" if your terminal supports it
MOVE_TO_COL="echo -en \\033[${RES_COL}G"
# terminal sequence to set color to a 'success' color (currently: green)
SETCOLOR_SUCCESS="echo -en ${COLOR_GREEN}"
# terminal sequence to set color to a 'failure' color (currently: red)
SETCOLOR_FAILURE="echo -en ${COLOR_RED}"
# terminal sequence to set color to a 'warning' color (currently: yellow)
SETCOLOR_WARNING="echo -en ${COLOR_YELLOW}"
# terminal sequence to reset to the default color.
SETCOLOR_NORMAL="echo -en ${COLOR_NORMAL}"
# default kernel loglevel on boot (syslog will reset this)
LOGLEVEL=3
# Set to anything other than 'no' to allow hotkey interactive startup...
PROMPT=yes

echo_success() {
  [ "$BOOTUP" = "color" ] && $MOVE_TO_COL
  echo -n "[  "
  [ "$BOOTUP" = "color" ] && $SETCOLOR_SUCCESS
  echo -n $"OK"
  [ "$BOOTUP" = "color" ] && $SETCOLOR_NORMAL
  echo -n "  ]"
  echo -ne "\r"
  return 0
}

echo_failure() {
  [ "$BOOTUP" = "color" ] && $MOVE_TO_COL
  echo -n "["
  [ "$BOOTUP" = "color" ] && $SETCOLOR_FAILURE
  echo -n $"FAILED"
  [ "$BOOTUP" = "color" ] && $SETCOLOR_NORMAL
  echo -n "]"
  echo -ne "\r"
  return 1
}

echo_passed() {
  [ "$BOOTUP" = "color" ] && $MOVE_TO_COL
  echo -n "["
  [ "$BOOTUP" = "color" ] && $SETCOLOR_WARNING
  echo -n $"PASSED"
  [ "$BOOTUP" = "color" ] && $SETCOLOR_NORMAL
  echo -n "]"
  echo -ne "\r"
  return 1
}

echo_warning() {
  [ "$BOOTUP" = "color" ] && $MOVE_TO_COL
  echo -n "["
  [ "$BOOTUP" = "color" ] && $SETCOLOR_WARNING
  echo -n $"WARNING"
  [ "$BOOTUP" = "color" ] && $SETCOLOR_NORMAL
  echo -n "]"
  echo -ne "\r"
  return 1
}

# returns OK if $1 contains $2
strstr() {
  [ "${1#*$2*}" = "$1" ] && return 1
  return 0
}

fetch_time_it() {
	if [ ! -x /usr/bin/time ]; then
		$@
		return $?
	fi

	/usr/bin/time -o fetch_time.csv -a -f "$2,%e" $@
}

build_time_it() {
	if [ ! -x /usr/bin/time ] ; then
		$@
		return $?
	fi

	/usr/bin/time -o build_time.csv -a -f "$2,%e" "$@"
}

installramfs_time_it() {
	if [ ! -x /usr/bin/time ] ; then
		$@
		return $?
	fi

	/usr/bin/time -o installramfs_time.csv -a -f "$2,%e" $@
}


install_time_it() {
	if [ ! -x /usr/bin/time ] ; then
		$@
		return $?
	fi

	/usr/bin/time -o install_time.csv -a -f "$2,%e" $@
}
